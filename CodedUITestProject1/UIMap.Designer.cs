// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethodTest - Use 'RecordedMethodTestParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethodTest()
        {
            #region Variable Declarations
            WinClient uIChromeLegacyWindowClient = this.UISpotifyWindow.UIChromeLegacyWindowWindow.UIChromeLegacyWindowClient;
            WinControl uIItemDocument = this.UISpotifyWindow.UIChromeLegacyWindowWindow.UIItemDocument;
            WinControl uIChromeLegacyWindowDocument = this.UISpotifyWindow.UIChromeLegacyWindowWindow.UIChromeLegacyWindowDocument;
            #endregion

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // Click 'Chrome Legacy Window' client
            Mouse.Click(uIChromeLegacyWindowClient, new Point(74, 83));

            // Click 'Chrome Legacy Window' client
            Mouse.Click(uIChromeLegacyWindowClient, new Point(141, 27));

            // Type 't' in document
            Keyboard.SendKeys(uIItemDocument, this.RecordedMethodTestParams.UIItemDocumentSendKeys, ModifierKeys.None);

            // Type 'he lonely island{Enter}' in 'Chrome Legacy Window' document
            Keyboard.SendKeys(uIChromeLegacyWindowDocument, this.RecordedMethodTestParams.UIChromeLegacyWindowDocumentSendKeys, ModifierKeys.None);

            // Click 'Chrome Legacy Window' document
            Mouse.Click(uIChromeLegacyWindowDocument, new Point(252, 618));
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfWindow uIWpfWindow = this.UIWpfWindow;
            WpfEdit uIMitNameEdit = this.UIMainWindowWindow.UINewEmployeexamlPane.UIMitNameEdit;
            WpfEdit uIMitVornameEdit = this.UIMainWindowWindow.UINewEmployeexamlPane.UIMitVornameEdit;
            #endregion

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(59, 72));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(152, 61));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(150, 19));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(365, 78));

            // Type 'John' in 'mitName' text box
            uIMitNameEdit.Text = this.RecordedMethod1Params.UIMitNameEditText;

            // Type '{Tab}' in 'mitName' text box
            Keyboard.SendKeys(uIMitNameEdit, this.RecordedMethod1Params.UIMitNameEditSendKeys, ModifierKeys.None);

            // Type 'Francis' in 'mitVorname' text box
            uIMitVornameEdit.Text = this.RecordedMethod1Params.UIMitVornameEditText;

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(352, 131));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(722, 161));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(123, 97));

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(130, 35));
        }
        
        /// <summary>
        /// CreateMitarbeiter - Use 'CreateMitarbeiterParams' to pass parameters into this method.
        /// </summary>
        public void CreateMitarbeiter()
        {
            #region Variable Declarations
            WpfWindow uIMainWindowWindow = this.UIMainWindowWindow;
            WpfButton uIMitarbeiterHinzufügeButton = this.UIMainWindowWindow.UIMitarbeiterHinzufügeButton;
            WpfEdit uIMitNameEdit = this.UIMainWindowWindow.UINewEmployeexamlPane.UIMitNameEdit;
            WpfEdit uIMitVornameEdit = this.UIMainWindowWindow.UINewEmployeexamlPane.UIMitVornameEdit;
            WpfCheckBox uIMitAktivCheckBox = this.UIMainWindowWindow.UINewEmployeexamlPane.UIMitAktivCheckBox;
            WpfButton uISpeichernButton = this.UIMainWindowWindow.UINewEmployeexamlPane.UISpeichernButton;
            WpfButton uIMitarbeiterListenansButton = this.UIMainWindowWindow.UIMitarbeiterListenansButton;
            WpfList uIMitListBoxList = this.UIMainWindowWindow.UINewEmployeexamlPane.UIMitListBoxList;
            #endregion

            // Click 'MainWindow' window
            Mouse.Click(uIMainWindowWindow, new Point(126, 271));

            // Click 'Mitarbeiter Hinzufügen' button
            Mouse.Click(uIMitarbeiterHinzufügeButton, new Point(120, 13));

            // Type 'John' in 'mitName' text box
            uIMitNameEdit.Text = this.CreateMitarbeiterParams.UIMitNameEditText;

            // Type '{Tab}' in 'mitName' text box
            Keyboard.SendKeys(uIMitNameEdit, this.CreateMitarbeiterParams.UIMitNameEditSendKeys, ModifierKeys.None);

            // Type 'Francis' in 'mitVorname' text box
            uIMitVornameEdit.Text = this.CreateMitarbeiterParams.UIMitVornameEditText;

            // Select 'mitAktiv' check box
            uIMitAktivCheckBox.Checked = this.CreateMitarbeiterParams.UIMitAktivCheckBoxChecked;

            // Click 'Speichern' button
            Mouse.Click(uISpeichernButton, new Point(8, 8));

            // Click 'Mitarbeiter Listenansicht' button
            Mouse.Click(uIMitarbeiterListenansButton, new Point(132, 8));

            // Select 'John' in 'mitListBox' list box
            uIMitListBoxList.SelectedItemsAsString = this.CreateMitarbeiterParams.UIMitListBoxListSelectedItemsAsString;
        }
        
        /// <summary>
        /// CheckUser - Use 'CheckUserExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckUser()
        {
            #region Variable Declarations
            WpfListItem uIJohnListItem = this.UIMainWindowWindow.UINewEmployeexamlPane.UIMitListBoxList.UIJohnListItem;
            #endregion

            // Verify that the 'Name' property of 'John' list item equals 'John'
            Assert.AreEqual(this.CheckUserExpectedValues.UIJohnListItemName, uIJohnListItem.Name, "Name doesn\'t match");
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WpfWindow uIMainWindowWindow = this.UIMainWindowWindow;
            WpfButton uINeueEinsatzButton = this.UIMainWindowWindow.UINeueEinsatzButton;
            WpfEdit uIJobNameEdit = this.UIMainWindowWindow.UINewEmployeexamlPane.UIJobNameEdit;
            WpfComboBox uIJobProjComboBox = this.UIMainWindowWindow.UINewEmployeexamlPane.UIJobProjComboBox;
            WpfDatePicker uIJobStartDatePicker = this.UIMainWindowWindow.UINewEmployeexamlPane.UIJobStartDatePicker;
            WpfDatePicker uIJobEndDatePicker = this.UIMainWindowWindow.UINewEmployeexamlPane.UIJobEndDatePicker;
            WpfButton uISpeichernButton1 = this.UIMainWindowWindow.UINewEmployeexamlPane.UISpeichernButton1;
            #endregion

            // Click 'MainWindow' window
            Mouse.Click(uIMainWindowWindow, new Point(136, 282));

            // Click 'Neue Einsatz' button
            Mouse.Click(uINeueEinsatzButton, new Point(140, 7));

            // Type 'Test' in 'jobName' text box
            uIJobNameEdit.Text = this.RecordedMethod2Params.UIJobNameEditText;

            // Select 'Projekt YellowLabel' in 'jobProj' combo box
            uIJobProjComboBox.SelectedItem = this.RecordedMethod2Params.UIJobProjComboBoxSelectedItem;

            // Select '06-Jun-2016' in 'jobStart' date picker
            uIJobStartDatePicker.DateAsString = this.RecordedMethod2Params.UIJobStartDatePickerDateAsString;

            // Select '06-Jun-2016' in 'jobEnd' date picker
            uIJobEndDatePicker.DateAsString = this.RecordedMethod2Params.UIJobEndDatePickerDateAsString;

            // Click 'Speichern' button
            Mouse.Click(uISpeichernButton1, new Point(29, 12));
        }
        
        #region Properties
        public virtual RecordedMethodTestParams RecordedMethodTestParams
        {
            get
            {
                if ((this.mRecordedMethodTestParams == null))
                {
                    this.mRecordedMethodTestParams = new RecordedMethodTestParams();
                }
                return this.mRecordedMethodTestParams;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual CreateMitarbeiterParams CreateMitarbeiterParams
        {
            get
            {
                if ((this.mCreateMitarbeiterParams == null))
                {
                    this.mCreateMitarbeiterParams = new CreateMitarbeiterParams();
                }
                return this.mCreateMitarbeiterParams;
            }
        }
        
        public virtual CheckUserExpectedValues CheckUserExpectedValues
        {
            get
            {
                if ((this.mCheckUserExpectedValues == null))
                {
                    this.mCheckUserExpectedValues = new CheckUserExpectedValues();
                }
                return this.mCheckUserExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public UISpotifyWindow UISpotifyWindow
        {
            get
            {
                if ((this.mUISpotifyWindow == null))
                {
                    this.mUISpotifyWindow = new UISpotifyWindow();
                }
                return this.mUISpotifyWindow;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethodTestParams mRecordedMethodTestParams;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private CreateMitarbeiterParams mCreateMitarbeiterParams;
        
        private CheckUserExpectedValues mCheckUserExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private UISpotifyWindow mUISpotifyWindow;
        
        private UIWpfWindow mUIWpfWindow;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethodTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethodTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type 't' in document
        /// </summary>
        public string UIItemDocumentSendKeys = "t";
        
        /// <summary>
        /// Type 'he lonely island{Enter}' in 'Chrome Legacy Window' document
        /// </summary>
        public string UIChromeLegacyWindowDocumentSendKeys = "he lonely island{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'John' in 'mitName' text box
        /// </summary>
        public string UIMitNameEditText = "John";
        
        /// <summary>
        /// Type '{Tab}' in 'mitName' text box
        /// </summary>
        public string UIMitNameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Francis' in 'mitVorname' text box
        /// </summary>
        public string UIMitVornameEditText = "Francis";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateMitarbeiter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateMitarbeiterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'John' in 'mitName' text box
        /// </summary>
        public string UIMitNameEditText = "John";
        
        /// <summary>
        /// Type '{Tab}' in 'mitName' text box
        /// </summary>
        public string UIMitNameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Francis' in 'mitVorname' text box
        /// </summary>
        public string UIMitVornameEditText = "Francis";
        
        /// <summary>
        /// Select 'mitAktiv' check box
        /// </summary>
        public bool UIMitAktivCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'John' in 'mitListBox' list box
        /// </summary>
        public string UIMitListBoxListSelectedItemsAsString = "John";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckUser'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckUserExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'John' list item equals 'John'
        /// </summary>
        public string UIJohnListItemName = "John";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Test' in 'jobName' text box
        /// </summary>
        public string UIJobNameEditText = "Test";
        
        /// <summary>
        /// Select 'Projekt YellowLabel' in 'jobProj' combo box
        /// </summary>
        public string UIJobProjComboBoxSelectedItem = "Projekt YellowLabel";
        
        /// <summary>
        /// Select '06-Jun-2016' in 'jobStart' date picker
        /// </summary>
        public string UIJobStartDatePickerDateAsString = "06-Jun-2016";
        
        /// <summary>
        /// Select '06-Jun-2016' in 'jobEnd' date picker
        /// </summary>
        public string UIJobEndDatePickerDateAsString = "06-Jun-2016";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpotifyWindow : WinWindow
    {
        
        public UISpotifyWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spotify";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "SpotifyMainWindow";
            this.WindowTitles.Add("Spotify");
            #endregion
        }
        
        #region Properties
        public UIChromeLegacyWindowWindow UIChromeLegacyWindowWindow
        {
            get
            {
                if ((this.mUIChromeLegacyWindowWindow == null))
                {
                    this.mUIChromeLegacyWindowWindow = new UIChromeLegacyWindowWindow(this);
                }
                return this.mUIChromeLegacyWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIChromeLegacyWindowWindow mUIChromeLegacyWindowWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIChromeLegacyWindowWindow : WinWindow
    {
        
        public UIChromeLegacyWindowWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "180990392";
            this.WindowTitles.Add("Spotify");
            #endregion
        }
        
        #region Properties
        public WinClient UIChromeLegacyWindowClient
        {
            get
            {
                if ((this.mUIChromeLegacyWindowClient == null))
                {
                    this.mUIChromeLegacyWindowClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIChromeLegacyWindowClient.SearchProperties[WinControl.PropertyNames.Name] = "Chrome Legacy Window";
                    this.mUIChromeLegacyWindowClient.WindowTitles.Add("Spotify");
                    #endregion
                }
                return this.mUIChromeLegacyWindowClient;
            }
        }
        
        public WinControl UIItemDocument
        {
            get
            {
                if ((this.mUIItemDocument == null))
                {
                    this.mUIItemDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIItemDocument.WindowTitles.Add("Spotify");
                    #endregion
                }
                return this.mUIItemDocument;
            }
        }
        
        public WinControl UIChromeLegacyWindowDocument
        {
            get
            {
                if ((this.mUIChromeLegacyWindowDocument == null))
                {
                    this.mUIChromeLegacyWindowDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUIChromeLegacyWindowDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIChromeLegacyWindowDocument.WindowTitles.Add("Spotify");
                    #endregion
                }
                return this.mUIChromeLegacyWindowDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIChromeLegacyWindowClient;
        
        private WinControl mUIItemDocument;
        
        private WinControl mUIChromeLegacyWindowDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UINewEmployeexamlPane UINewEmployeexamlPane
        {
            get
            {
                if ((this.mUINewEmployeexamlPane == null))
                {
                    this.mUINewEmployeexamlPane = new UINewEmployeexamlPane(this);
                }
                return this.mUINewEmployeexamlPane;
            }
        }
        
        public WpfButton UIMitarbeiterHinzufügeButton
        {
            get
            {
                if ((this.mUIMitarbeiterHinzufügeButton == null))
                {
                    this.mUIMitarbeiterHinzufügeButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIMitarbeiterHinzufügeButton.SearchProperties[WpfButton.PropertyNames.Name] = "Mitarbeiter Hinzufügen";
                    this.mUIMitarbeiterHinzufügeButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIMitarbeiterHinzufügeButton;
            }
        }
        
        public WpfButton UIMitarbeiterListenansButton
        {
            get
            {
                if ((this.mUIMitarbeiterListenansButton == null))
                {
                    this.mUIMitarbeiterListenansButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIMitarbeiterListenansButton.SearchProperties[WpfButton.PropertyNames.Name] = "Mitarbeiter Listenansicht";
                    this.mUIMitarbeiterListenansButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIMitarbeiterListenansButton;
            }
        }
        
        public WpfButton UINeueEinsatzButton
        {
            get
            {
                if ((this.mUINeueEinsatzButton == null))
                {
                    this.mUINeueEinsatzButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUINeueEinsatzButton.SearchProperties[WpfButton.PropertyNames.Name] = "Neue Einsatz";
                    this.mUINeueEinsatzButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUINeueEinsatzButton;
            }
        }
        #endregion
        
        #region Fields
        private UINewEmployeexamlPane mUINewEmployeexamlPane;
        
        private WpfButton mUIMitarbeiterHinzufügeButton;
        
        private WpfButton mUIMitarbeiterListenansButton;
        
        private WpfButton mUINeueEinsatzButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINewEmployeexamlPane : WpfPane
    {
        
        public UINewEmployeexamlPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "pagesFrame";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIMitNameEdit
        {
            get
            {
                if ((this.mUIMitNameEdit == null))
                {
                    this.mUIMitNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIMitNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "mitName";
                    this.mUIMitNameEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIMitNameEdit;
            }
        }
        
        public WpfEdit UIMitVornameEdit
        {
            get
            {
                if ((this.mUIMitVornameEdit == null))
                {
                    this.mUIMitVornameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIMitVornameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "mitVorname";
                    this.mUIMitVornameEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIMitVornameEdit;
            }
        }
        
        public WpfCheckBox UIMitAktivCheckBox
        {
            get
            {
                if ((this.mUIMitAktivCheckBox == null))
                {
                    this.mUIMitAktivCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIMitAktivCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "mitAktiv";
                    this.mUIMitAktivCheckBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIMitAktivCheckBox;
            }
        }
        
        public WpfButton UISpeichernButton
        {
            get
            {
                if ((this.mUISpeichernButton == null))
                {
                    this.mUISpeichernButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISpeichernButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "mitSubmit";
                    this.mUISpeichernButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISpeichernButton;
            }
        }
        
        public UIMitListBoxList UIMitListBoxList
        {
            get
            {
                if ((this.mUIMitListBoxList == null))
                {
                    this.mUIMitListBoxList = new UIMitListBoxList(this);
                }
                return this.mUIMitListBoxList;
            }
        }
        
        public WpfEdit UIJobNameEdit
        {
            get
            {
                if ((this.mUIJobNameEdit == null))
                {
                    this.mUIJobNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIJobNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "jobName";
                    this.mUIJobNameEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIJobNameEdit;
            }
        }
        
        public WpfComboBox UIJobProjComboBox
        {
            get
            {
                if ((this.mUIJobProjComboBox == null))
                {
                    this.mUIJobProjComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIJobProjComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "jobProj";
                    this.mUIJobProjComboBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIJobProjComboBox;
            }
        }
        
        public WpfDatePicker UIJobStartDatePicker
        {
            get
            {
                if ((this.mUIJobStartDatePicker == null))
                {
                    this.mUIJobStartDatePicker = new WpfDatePicker(this);
                    #region Search Criteria
                    this.mUIJobStartDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "jobStart";
                    this.mUIJobStartDatePicker.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIJobStartDatePicker;
            }
        }
        
        public WpfDatePicker UIJobEndDatePicker
        {
            get
            {
                if ((this.mUIJobEndDatePicker == null))
                {
                    this.mUIJobEndDatePicker = new WpfDatePicker(this);
                    #region Search Criteria
                    this.mUIJobEndDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "jobEnd";
                    this.mUIJobEndDatePicker.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIJobEndDatePicker;
            }
        }
        
        public WpfButton UISpeichernButton1
        {
            get
            {
                if ((this.mUISpeichernButton1 == null))
                {
                    this.mUISpeichernButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUISpeichernButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "jobSubmit";
                    this.mUISpeichernButton1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISpeichernButton1;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIMitNameEdit;
        
        private WpfEdit mUIMitVornameEdit;
        
        private WpfCheckBox mUIMitAktivCheckBox;
        
        private WpfButton mUISpeichernButton;
        
        private UIMitListBoxList mUIMitListBoxList;
        
        private WpfEdit mUIJobNameEdit;
        
        private WpfComboBox mUIJobProjComboBox;
        
        private WpfDatePicker mUIJobStartDatePicker;
        
        private WpfDatePicker mUIJobEndDatePicker;
        
        private WpfButton mUISpeichernButton1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMitListBoxList : WpfList
    {
        
        public UIMitListBoxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "mitListBox";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIJohnListItem
        {
            get
            {
                if ((this.mUIJohnListItem == null))
                {
                    this.mUIJohnListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIJohnListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "John";
                    this.mUIJohnListItem.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIJohnListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIJohnListItem;
        #endregion
    }
}
